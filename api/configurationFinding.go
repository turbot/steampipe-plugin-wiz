package api

import (
	"context"

	"github.com/machinebox/graphql"
)

// Define the query
const (
	queryConfigurationFindingList = `
query ListConfigurationFindings($first: Int, $after: String, $filter: ConfigurationFindingFilters) {
  configurationFindings(first: $first, after: $after, filterBy: $filter) {
    pageInfo {
      hasNextPage
      endCursor
    }
    totalCount
    nodes {
      id
      result
      resource {
        name
        id
        type
        status
        region
        cloudPlatform
        nativeType
        projects {
          id
        }
        tags {
          key
          value
        }
      }
      rule {
        id
      }
      severity
      subscription {
        id
      }
      remediation
      analyzedAt
      status
      resolutionReason
      note {
        text
      }
    }
  }
}
`

	queryConfigurationFindingGet = `
query GetConfigurationFinding($id: ID!) {
  configurationFinding(id: $id) {
    id
    result
    resource {
      name
      id
      type
      status
      region
      cloudPlatform
      nativeType
      projects {
        id
      }
      tags {
        key
        value
      }
    }
    rule {
      id
    }
    severity
    subscription {
      id
    }
    remediation
    analyzedAt
    status
    resolutionReason
    note {
      text
    }
  }
}
`
)

// Configuration finding object
type ConfigurationFinding struct {
	AnalyzedAt       string                                `json:"analyzedAt"`
	Id               string                                `json:"id"`
	Remediation      string                                `json:"remediation"`
	ResolutionReason string                                `json:"resolutionReason"`
	Resource         ConfigurationFindingResource          `json:"resource"`
	Result           string                                `json:"result"`
	Rule             ConfigurationFindingQueryRule         `json:"rule"`
	Severity         string                                `json:"severity"`
	Status           string                                `json:"status"`
	Subscription     ConfigurationFindingQuerySubscription `json:"subscription"`
}

// Configuration finding resource object
type ConfigurationFindingResource struct {
	CloudPlatform string                                     `json:"analyzedAt,omitempty"`
	Id            string                                     `json:"id,omitempty"`
	Name          string                                     `json:"name,omitempty"`
	NativeType    string                                     `json:"nativeType,omitempty"`
	Projects      []ConfigurationFindingResourceQueryProject `json:"projects,omitempty"`
	Region        string                                     `json:"region,omitempty"`
	Status        string                                     `json:"status,omitempty"`
	Tags          []ResourceTag                              `json:"tags,omitempty"`
	Type          string                                     `json:"type,omitempty"`
}

// Project information
type ConfigurationFindingResourceQueryProject struct {
	Id string `json:"id"`
}

// Cloud configuration rule information
type ConfigurationFindingQueryRule struct {
	Id string `json:"id"`
}

// Subscription information
type ConfigurationFindingQuerySubscription struct {
	Id string `json:"id"`
}

// Relay-style node for cloud configuration findings
type ConfigurationFindingConnection struct {
	Nodes      []ConfigurationFinding `json:"nodes"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

// ListConfigurationFindingsResponse is returned by ListConfigurationFindings on success
type ListConfigurationFindingsResponse struct {
	ConfigurationFindings ConfigurationFindingConnection `json:"configurationFindings"`
}

type DateFilter struct {
	After  string
	Before string
}

// Fields used to filter the cloud configuration findings response
type ListConfigurationFindingsRequestConfiguration struct {
	// Optional - return findings detected within the given time range.
	AnalyzedAt DateFilter

	// When paginating forwards, the cursor to continue.
	EndCursor string

	// The maximum number of results to return in a single call. To retrieve the
	// remaining results, make another call with the returned EndCursor value.
	//
	// Maximum limit is 500.
	Limit int

	// Optional - filter findings by result.
	//
	// Possible values are: ERROR, FAIL, NOT_ASSESSED, PASS.
	Result string

	// Optional - filter findings generated by rule.
	RuleId string

	// Optional - filter findings by severity.
	//
	// Possible values: CRITICAL, HIGH, LOW, MEDIUM, NONE.
	Severity string

	// Optional - filter findings by status.
	//
	// Possible values: IN_PROGRESS, OPEN, REJECTED, RESOLVED.
	Status string
}

// ListConfigurationFindings returns a paginated list of cloud configuration findings
//
// @param ctx context for configuration
//
// @param client the API client
//
// @param options the API parameters
func ListConfigurationFindings(
	ctx context.Context,
	client *Client,
	options *ListConfigurationFindingsRequestConfiguration,
) (*ListConfigurationFindingsResponse, error) {
	// Make a request
	req := graphql.NewRequest(queryConfigurationFindingList)

	// Check for optional filters
	filter := map[string]interface{}{}
	if options.Result != "" {
		filter["result"] = options.Result
	}
	if options.RuleId != "" {
		rule := map[string]string{
			"id": options.RuleId,
		}
		filter["rule"] = rule
	}
	if options.Severity != "" {
		filter["severity"] = options.Severity
	}
	if options.Status != "" {
		filter["status"] = options.Status
	}

	filter["analyzedAt"] = map[string]string{}
	if options.AnalyzedAt.After != "" {
		filter["analyzedAt"] = map[string]string{
			"after": options.AnalyzedAt.After,
		}
	}
	if options.AnalyzedAt.Before != "" {
		filter["analyzedAt"] = map[string]string{
			"before": options.AnalyzedAt.Before,
		}
	}
	req.Var("filter", filter)

	// Check for paging options and set it
	if options.Limit > 0 {
		req.Var("first", options.Limit)
	}

	if options.EndCursor != "" {
		req.Var("after", options.EndCursor)
	}

	// execute api call
	var responseData ListConfigurationFindingsResponse
	err := client.doRequest(req, &responseData)
	if err != nil {
		return nil, err
	}

	return &responseData, err
}

// GetConfigurationFindingResponse is returned by GetConfigurationFinding on success
type GetConfigurationFindingResponse struct {
	ConfigurationFinding ConfigurationFinding `json:"configurationFinding"`
}

// GetConfigurationFinding returns a specific finding that matches the ID
//
// @param ctx context for configuration
//
// @param client the API client
//
// @param id unique identifier of the resource
func GetConfigurationFinding(
	ctx context.Context,
	client *Client,
	id string,
) (*GetConfigurationFindingResponse, error) {
	// Make a request
	req := graphql.NewRequest(queryConfigurationFindingGet)

	// Set the required variables
	req.Var("id", id)

	// execute api call
	var responseData GetConfigurationFindingResponse
	err := client.doRequest(req, &responseData)
	if err != nil {
		return nil, err
	}

	return &responseData, err
}
